name: Spin Up Azure environment

on:
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: redsol-RG
  AZURE_APP_PLAN: actions-ttt-deployment
  AZURE_LOCATION: '"East US"'
  # Used in AZ_IMAGE_REGISTRY_URL: *.azurecr.io
  AZ_IMAGE_REGISTRY_NAME: redsol
  AZ_IMAGE_REGISTRY_URL: redsol.azurecr.io
  AZ_STORAGE_RG: redsol-storage-rg
  AZ_STORAGE_AC_NAME: redsolst
  #################################################
  ### USER PROVIDED VALUES ARE REQUIRED BELOW   ###
  #################################################
  #################################################
  ### REPLACE USERNAME WITH GH USERNAME         ###
  AZURE_WEBAPP_NAME: redsol-ttt-app
  #################################################

jobs:
  setup-up-azure-resources:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Azure resource group
        if: success()
        run: |
          az group create \
            --name ${{env.AZURE_RESOURCE_GROUP}} \
            --location ${{env.AZURE_LOCATION}} \
            --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      #
      # Note if a new registry is created, there is a manual step to setup the Azure 
      # admin account following these steps: https://docs.microsoft.com/en-us/azure/container-registry/container-registry-authentication#admin-account
      - name: Create Az Registry
        if: success()
        run: |
          az acr create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZ_IMAGE_REGISTRY_NAME }} \
            --sku Basic --admin-enabled true
      
      #
      # we need an azure storage account for persistent files, howto's; https://docs.microsoft.com/en-us/azure/storage/common/storage-account-create?tabs=azure-cli
      - name: Azure Storage
        if: success()
        run: |
          set -x -v;
          az group create \
            --name ${{ env.AZ_STORAGE_RG }} \
            --location ${{ env.AZURE_LOCATION }} \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} && \
          az storage account create \
            --name ${{ env.AZ_STORAGE_AC_NAME }} \
            --resource-group ${{ env.AZ_STORAGE_RG }} \
            --location ${{ env.AZURE_LOCATION }} \
            --sku Standard_RAGRS \
            --kind StorageV2

      - name: Create Azure app service plan
        if: success()
        run: |
          az appservice plan create --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{env.AZURE_APP_PLAN}} --is-linux --sku B1 --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Create webapp resource
        if: success()
        run: |
          az webapp create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
             --plan ${{ env.AZURE_APP_PLAN }} \
             --name ${{ env.AZURE_WEBAPP_NAME }} \
             --multicontainer-config-type compose \
             --multicontainer-config-file config/docker-compose.yml \
             --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
      
      - name: Config webapp settings
        if: success()
        run: |
          az webapp config appsettings set \
             --settings DOCKER_REGISTRY_SERVER_USERNAME=${{ secrets.ACR_USERNAME }} \
                        DOCKER_REGISTRY_SERVER_PASSWORD=${{ secrets.ACR_PASSWORD }} \
                        DOCKER_REGISTRY_SERVER_URL=${{ env.AZ_IMAGE_REGISTRY_URL }} \
                        WEBSITES_PORT=7474 \
                        NEO4J_AUTH=none \
                        NEO4J_dbms_security_procedures_unrestricted=algo.*,apoc.* \
                        NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
             --name ${{ env.AZURE_WEBAPP_NAME }} \
             --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
             --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} && \
          az webapp config container set \
             --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
             --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} \
             --name ${{ env.AZURE_WEBAPP_NAME }} \
             --multicontainer-config-type compose \
             --multicontainer-config-file config/docker-compose.yml
  
      - name: Restart the webapp
        if: success()
        run: |
          az webapp restart \
             --name ${{ env.AZURE_WEBAPP_NAME }} \
             --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
             --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      # TODO: remove, this method of deployment wasn't working so we might not need it. Instead we'll set the app settings
      # - name: Create webapp identity
      #   if: success()
      #   run: |
      #     P_ID=$(az webapp identity assign --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --query principalId --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} --output tsv)
      #     ACR_REGISTRY_ID=$(az acr show --name ${{ env.AZ_IMAGE_REGISTRY_NAME }} --query id --output tsv --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
      #     echo "==> ${P_ID}"
      #     echo "==> ${ACR_REGISTRY_ID}"
      #     az role assignment create --assignee "${P_ID}" --scope "${ACR_REGISTRY_ID}" --role acrpull

      # Commented out for now since we're using ACR to deploy the app
      # - name: Configure webapp to use GitHub Packages
      #   if: success()
      #   run: |
      #     az webapp config container set --docker-custom-image-name nginx --docker-registry-server-password ${{secrets.GITHUB_TOKEN}} --docker-registry-server-url https://docker.pkg.github.com --docker-registry-server-user ${{github.actor}} --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
